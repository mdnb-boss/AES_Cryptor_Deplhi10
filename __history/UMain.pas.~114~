unit UMain;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls;

type
  TForm1 = class(TForm)
    Label1: TLabel;
    edEntrada: TEdit;
    edRespostaEntrada: TEdit;
    Label2: TLabel;
    edSaida: TEdit;
    edRespostaSaida: TEdit;
    Label3: TLabel;
    Button2: TButton;
    Button1: TButton;
    procedure Button1Click(Sender: TObject);

  private
    { Private declarations }
  public
    { Public declarations }



  end;

//  Encrypt = function aencrypt(a: Pchar; b: Pchar): TByteArray; stdcall; EXTERNAL 'cryptorAES.dll' name 'encrypt';


var
Form1: TForm1;

implementation


{$R *.dfm}

function Converter(P: TByteArray): string;
begin
  SetLength(Result, Length(P));
  System.Move(P[0], Result[1], Length(P));
end;

procedure mostrarNome;
type
  TSetNome = function(a: string): string; stdcall;
var
  xHandle: THandle;
  xNome: TSetNome;
  Nome: string;
begin
  xHandle := LoadLibrary('CryptorAES.dll');
  if xHandle > 0 then begin
    try
      @xNome := GetProcAddress(xHandle, 'setNome'); //nome do seu método no C#

      if @xNome <> nil then begin

        Nome := xNome('Marcelo daniel'); //chama o método

        ShowMessage(Nome);
      end
      else
      begin
        ShowMessage('metodo não encontrado');
      end;
    finally
      FreeLibrary(xHandle);
    end;
  end
  else
  begin
   ShowMessage('dll nao carregada');
  end;
end;

procedure TForm1.Button1Click(Sender: TObject);
Type
  TSoma = function(a: Integer; b: Integer): Integer; stdcall;

  TEncrypt = function (a: Pchar; b: Pchar): TByteArray; stdcall;
var
  xHandle: THandle;

  xSoma: TSoma;
  Soma: Integer;



  xEncrypt: TEncrypt;
  Encrypt: TByteArray;

begin

  mostrarNome;


end;

end.
